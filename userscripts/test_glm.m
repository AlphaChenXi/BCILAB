
%%
disp('Starting...');

traindata = io_loadset('data:/tutorial/imag_movements1/calib/DanielS001R01.dat');

% regression with Gaussian prior and lambda search
myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
    'ptype','regression', ...
    'lambdas',2.^(-4:0.5:4), ...
    'priors',{ ...
        'term1','Gaussian', ...
    }}}}};

% classification with Gaussian prior and lambda search
myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
    'ptype','classification', ...
    'lambdas',2.^(-4:0.5:4), ...
    'priors',{ ...
        'term1','Gaussian', ...
    }}}}};
% 
% % regression with Laplace prior and lambda search
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',2.^(-4:0.5:4), ...
%     'priors',{ ...
%         'term1','Laplace', ...
%     }}}}};
% 
% % regression with Laplace prior and lambda = 1
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1','Laplace', ...
%     }}}}};
% 
% % regression with Laplace prior and search over the laplacian scale parameter
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1',{'Laplace','Scales',2.^(-4:0.5:4)}, ...
%     }}}}};
% 
% % regression with StudentT prior and lambda=1
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1',{'StudentT'}, ...
%     }}}}};
% 
% % regression with StudentT prior and scale search
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1',{'StudentT','Scales',2.^(-4:0.5:4)}, ...
%     }}}}};
% 
% % regression with StudentT prior and search over the degrees of freedom
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1',{'StudentT','nu',[1,2,3,4,5,6,7,8]}, ...
%     }}}}};
% 
% % regression with StudentT prior and search over both degrees of freedom and lambdas
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',2.^(-4:4), ...
%     'priors',{ ...
%         'term1',{'StudentT','nu',[1,2,3,4,5,6,7,8]}, ...
%     }}}}};
% 
% % regression with ExpPow prior and search over both shape parameter and lambdas
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',2.^(-4:4), ...
%     'priors',{ ...
%         'term1',{'ExpPow','alpha',[1,2,3,4,5,6,7,8,9,10]}, ...
%     }}}}};
% 
% % regression with Sech2 prior and lambdas=1
% myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
%     'ptype','regression', ...
%     'lambdas',1, ...
%     'priors',{ ...
%         'term1',{'Sech2'}, ...
%     }}}}};
% 

% classification with Sech2 prior and lambdas=1
myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
    'ptype','classification', ...
    'lambdas',1, ...
    'priors',{ ...
        'term1',{'Sech2'}, ...
    }}}}};


[trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
lastmodel.predictivemodel.model.w


%%
if 0
    traindata = io_loadset('data:/tutorial/imag_movements1/calib/DanielS001R01.dat');
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm','ptype','classification','lambdas',2.^(-4:0.5:4)}}}};
    [trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
    
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm','ptype','regression','lambdas',2.^(-4:0.5:4)}}}};
    [trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
end