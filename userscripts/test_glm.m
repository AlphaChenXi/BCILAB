disp('Starting...');

%% ERP analysis

traindata = rmfield(exp_eval_optimized(flt_clean_settings( ...
    'Signal',io_loadset('data:/tutorial/flanker_task/12-08-002_ERN.vhdr'), ...
    'Setting',{'highpass', 'BadWindowRemoval','on'})),'tracking');

% simple baseline approach for debugging...
% myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
%     'Prediction',{'MachineLearning',{'Learner',{'logreg','Variant','l1'}}}};
% simple baseline approach for debugging...
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'MachineLearning',{'Learner',{'logreg','Variant','l2'}}}};
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'MachineLearning',{'Learner',{'logreg','Variant','vb'}}}};

% ridge regression with lambda search
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',2.^(-4:0.5:4), ...
        'priors',{ ...
            'term1','Gaussian', ...    
    }}}}};


% linear regression with Gaussian prior and no lambda search
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1','Gaussian', ...    
    }}}}};

% logistic regression with Gaussian prior and no lambda search
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1','Gaussian', ...    
    }}}}};

% logistic regression with Gaussian prior and lambda search
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',2.^(-4:0.5:4), ...
        'priors',{ ...
            'term1','Gaussian', ...    
    }}}}};

% logistic regression with Laplace prior
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1','Laplace', ...    
    }}}}};

% logistic regression with Sech2 prior
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1','Sech2', ...
    }}}}};

% linear regression with hard sample-wise group-sparse Laplace prior
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)x','Scales',50}, ...    
    }}}}};

% linear regression with hard component-wise group-sparse Laplace prior
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)x''','Scales',50}, ...    
    }}}}};

% linear regression with component-wise group-sparse Laplace prior and evidence maximization
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',60,'EpochExtraction',[-0.2 0.8],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)x''','Scales',2.^(-3:2:7)}, ...    
    }}}}};

% linear regression with component-wise group-sparse Laplace prior and sparsity in the wavelet domain
myapproach = {'DataflowSimplified' 'SignalProcessing',{'Resampling',128,'EpochExtraction',[-0.2 0.79],'ICA',{'Variant','robust_sphere','DataCleaning','off'}}, ...
    'Prediction',{'FeatureExtraction',{'GroupInto','matrix'},'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)x''','Scales',80}, ...
            'term2',{'Laplace','LinearOperator','@(x)vec(mydwt(x,daubcqf(4,''min''),2))''','Scales',15}, ...
    }}}}};


[trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{{'S101','S102'},{'S201','S202'}},'EvaluationMetric','auc')
%lastmodel.predictivemodel.model.w

%% ERD analysis
if 0
    traindata = io_loadset('data:/tutorial/imag_movements1/calib/DanielS001R01.dat');

    % regression with Gaussian prior and lambda search
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',2.^(-4:0.5:4), ...
        'priors',{ ...
            'term1','Gaussian', ...
        }}}}};

    % classification with Gaussian prior and lambda search
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',2.^(-4:0.5:4), ...
        'priors',{ ...
            'term1','Gaussian', ...
        }}}}};

    % regression with Laplace prior and lambda search
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',2.^(-4:0.5:4), ...
        'priors',{ ...
            'term1','Laplace', ...
        }}}}};

    % regression with Laplace prior and lambda = 1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1','Laplace', ...
        }}}}};

    % regression with Laplace prior and search over the laplacian scale parameter
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','Scales',2.^(-4:0.5:4)}, ...
        }}}}};

    % regression with StudentT prior and lambda=1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'StudentT'}, ...
        }}}}};

    % regression with StudentT prior and scale search
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'StudentT','Scales',2.^(-4:0.5:4)}, ...
        }}}}};

    % regression with StudentT prior and search over the degrees of freedom
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'StudentT','nu',[1,2,3,4,5,6,7,8]}, ...
        }}}}};

    % regression with StudentT prior and search over both degrees of freedom and lambdas
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',2.^(-4:4), ...
        'priors',{ ...
            'term1',{'StudentT','nu',[1,2,3,4,5,6,7,8]}, ...
        }}}}};

    % regression with ExpPow prior and search over both shape parameter and lambdas
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',2.^(-4:4), ...
        'priors',{ ...
            'term1',{'ExpPow','alpha',[1,2,3,4,5,6,7,8,9,10]}, ...
        }}}}};

    % regression with Sech2 prior and lambdas=1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Sech2'}, ...
        }}}}};


    % classification with Sech2 prior and lambdas=1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Sech2'}, ...
        }}}}};

    % regression with Laplacian prior on finite differences, and lambdas=1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','regression', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)diff(x)','Scales',50}, ...
        }}}}};

    % classification with Gaussian prior, and Laplacian prior on finite differences, and lambdas=1
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm', ...
        'ptype','classification', ...
        'lambdas',1, ...
        'priors',{ ...
            'term1',{'Laplace','LinearOperator','@(x)diff(x)''','Scales',50}, ...
            'term2',{'Gaussian'}, ...
        }}}}};

    [trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
    lastmodel.predictivemodel.model.w
end

%%
if 0
    traindata = io_loadset('data:/tutorial/imag_movements1/calib/DanielS001R01.dat');
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm','ptype','classification','lambdas',2.^(-4:0.5:4)}}}};
    [trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
    
    myapproach = {'CSP' 'Prediction',{'MachineLearning',{'Learner',{'glm','ptype','regression','lambdas',2.^(-4:0.5:4)}}}};
    [trainloss,lastmodel,laststats] = bci_train('Data',traindata,'Approach',myapproach,'TargetMarkers',{'StimulusCode_2','StimulusCode_3'},'EvaluationMetric','auc')
end